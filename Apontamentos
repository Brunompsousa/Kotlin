• VARIAVEIS

var - Pode ser alterada sem problema.
val - Apos receber dados, esta nao pode ser alterada, funcionando como "final" em java.

private - Apenas pode ser acedido dentro da classe e não é herdado.
protected - Mesmo que private mas é herdado
internal - Apenas é usada no modulo.

var X = listof() - para criarmos uma lista, podemos ainda meter o conteudo dentro dos ()

-----

• PRINT

Usamos o $ antes do nome da variavel, dentro dos "..." com o texto que queremos imprimir. 

Formatar floats em texto -> "%.*f".format("variavel")

Fazer o print da conta de dois numeros metemos entre {}

-----

• NUMERO RANDOM

-> Para um numero random apenas temos de fazer (X..Y).random(), sendo X o primeiro numero e Y o ultimo numero.

-----

• OPERADORES

(X in Y) 
-> Verificar se X esta na lista Y, isto é, verifica se X e igual a algum dos membros da lista Y [Podemos tambem trabalhar com !in]


-- For --
for(){ *code* } 
-> (i in x..y) [i>=y]
-> (i in x until y) [i>y]
-> (i in y downTo x) [i>=x] [Começa em y até x]
-> (i in x..y step z) [i<=y] [Começa em x até y dando saltos de z]
-> (i in *Listof*) [i recebe um elemento da lista a cada eteracao e é executado o até ao ultimo elementos na lista]
-> (i in *String*) [i recebe um caracter da string a cada eteracao e é executado o até ao ultimo caracter da String, contando tambem os espaços]


-- Switch --
when(*variavel*){
  *code*
  in x..y -> *code*     //Para intervalos de numeros.
  x,y,b -> *code*       //Para varios valores, tanto numericos ou strings.
  is *tipo* -> *code*   //Verificar se a variavel é de um certo tipo.
}

-----

• FUNÇÕES

fun *nome*(*assinatura*){ *code* }

-> É possivel ter funções com o mesmo nome, no entanto a sua assinatura, que são os parametros que recebe, têm que ser diferentes.
    addNum(n1:Int,n2:Int)   -> Recebe dois Int.
    addNum(n1:Float,n2:Int) -> Recebe um Int e um Float.
    
-> Parametros nao obrigatórios na assinatura da funcão, para isso estes precisam de ter um valor default atribuido.
    addNum1(n1:Int,n2:Int,message:String = "A soma é ") 

Na chamada da função podemos nao atribuir valor a 'message' ou caso o façamos o mesmo será sobrescrito.

OVERRIDE
-> Quando é feita sobreposição de uma funcao, caso se queira, podemos executar o codigo da funcao "principal" usando 'super.*nomeFuncao*()'
  open fun olaMundo(){*code*}
  override fun olaMundo(){ super.olaMundo() *code* }


-----

• CLASSES E CONSTRUTORES

-> IMPORTANTE TANTO NAS CLASSES COMO EM FUNCOES(override)! Quando criada uma classe, em kotlin, a sua predefenição é final, que impede haver
herança por parte de outras classes.
   Quando queremos que uma classe seja herdada usamos a palavra 'open' antes do nome. (Ex. open class Pessoa)
   
-> No construtor da classe apenas e necessario o nome da variavel, usando _nome, para que assim seja mais facil identificar.
class *nome* (*_nome:tipo*){ *code* }

-> Criar variaveis com o mesmo nome das do construtor para que seja passado o valor. Ex: nome = _nome

-> Usa-se o init{} para que seja executado codigo assim que criado um objecto.
init{ *code* }

-> Usa-se '.apply{}' quando queremos fazer varias alterações a um objeto criado para que nao seja preciso estar sempre a escrever '*nome_objeto*.*campo*'

 ○ GETTER/SETTER
-> Em kotlin não é necessaria a criacao destas funcoes, no entanto, podemos as criar após a variavel.
 var *nome*: *tipo*
 get() { *code* return field } 
 set(value) { field = value } [field funciona como um ponteiro para a variavel]
  
 ○ HERANÇA
-> Para que uma classe herde outra usamos ':' dps dos parametros, seguido do nome e das variaveis usadas na classe que estamos a herdar.
  open class Pessoa(nome: String, idd: Int){ *code* }
  class Professor(nome:String, idd: Int): Pessoa(nome, idd){ *code* }

 ○ NESTED / INNER CLASSES
-> Uma nested classe não tem acesso a nada do que esteja fora dela.
-> Uma inner classe tem acesso a tudo o que está fora dela, mesmo sendo privados, este acesso é na programaçao da classe e não quando é criado um objeto.
  Para que tenhamos acesso a toda a classe no MAIN temos de criar um objecto da classe principal e ai sim podemos acessar tanto o conteudo desta
como o conteudo das sua/s Inner classe/s. (Exer_11)

 ○ INTERFACE
-> É possivel atribuir varias interfaces a uma classe
  class Cao : animal, mamifero { *code* }

-> No caso de haver uma função com o mesmo nome em duas interfaces, podemos entao fazer:
  override fun escrever(){ super<*nomeInterface1*>.escrever(); super<*nomeInterface2*>.escrever() }
Outra opção será fazer override da funcao chamando apenas uma das funcoes super e criar uma nova funcao para a outra, ficando separadas,
  override fun escrever(){ super<*nomeInterface1*>.escrever() }
  fun escrever2(){ super<*nomeInterface2*>.escrever() }
  
-----

• OBJECTOS
-> Funcionam como classes no entanto não é necessario ser instanciado
 
 ○ Companion Object 
-> São objetos criandos dentro de uma classe, podem ser acedidos sem instancia a classe.
  (Exer_13)

-----

• EXCEÇÕES

try 
{ *Code* } catch (e: Exception){ *Code* } 

e -> contem a informação da exceção que foi chamada.

-----

• OUTRAS UTILIDADES

Thread.sleep(*tempo*) 
-> Faz com que a execução seja metida em pausa, o tempo e dado em milisegundos. (1000 = 1sec)
